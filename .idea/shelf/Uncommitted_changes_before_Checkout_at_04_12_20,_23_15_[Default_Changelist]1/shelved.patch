Index: resources/views/tasks/index.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@extends('layout')\n\n@section('content')\n    <div class=\"container\">\n        <table class=\"table\">\n            <thead>\n            <tr>\n                <th>Task</th>\n                <th>PM</th>\n                <th>Performer</th>\n                <th>Deadline</th>\n                <th>Time Left</th>\n                <th>Done</th>\n            </tr>\n            </thead>\n            <tbody>\n           @forelse ($tasks as $task)\n            <tr>\n                <td><a href=\"{{ route('tasks.show', $task) }}\">{{$task->title}}</a></td>\n                <td>{{$task->PM_id}}</td>\n                <td>{{$task->performer_id}}</td>\n                <td>{{$task->due_date}}</td>\n                <td></td>\n                <td>{{$task->completed}}</td>\n\n           @empty\n                <p>No relevant articles yet.</p>\n           @endforelse\n            </tbody>\n        </table>\n    </div>\n\n@endsection\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- resources/views/tasks/index.blade.php	(revision ba5b8acca5cd56a6022f1d2c9e04c820abb8feb3)
+++ resources/views/tasks/index.blade.php	(date 1607115531039)
@@ -20,8 +20,8 @@
                 <td>{{$task->PM_id}}</td>
                 <td>{{$task->performer_id}}</td>
                 <td>{{$task->due_date}}</td>
-                <td></td>
-                <td>{{$task->completed}}</td>
+                <td style="color: #c15d2a">{{ $task->calculateTimeLeft($task->id) }}</td>
+{{--                <td>{{$task->isCompleted($task->id)}}</td>--}}
 
            @empty
                 <p>No relevant articles yet.</p>
Index: app/Http/Controllers/TasksController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Http\\Controllers;\nuse App\\Models\\Task;\nuse App\\Models\\Tag;\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\n\nclass TasksController extends Controller\n{\n    public function index()\n    {\n        if(request('tag')){\n            $tasks = Tag::where('name', request('tag'))->firstOrFail()->tasks;\n        }else {\n            $tasks = Task::latest()->get();\n        }\n        return view('tasks.index',['tasks' => $tasks]);\n    }\n\n    public function show(Task $task)\n    {\n        return view('tasks.show',['task' => $task]);\n    }\n\n    public function create()\n    {\n        return view('tasks.create' , [\n            'tags' => Tag::all(),\n            'pms' => User::all(),\n            'performers' => User::all()\n        ]);\n    }\n\n    public function store()\n    {\n        //dd(request()->all());\n\n        $task = new Task($this->validateTask());\n        //$task = new Task($this->validateTask());\n        //dd(\"here\");\n        $task->user_id = 1;\n        $task->save();\n        $task->tags()->attach(request('tags'));\n       // Task::create(request()->all());\n        return redirect(route('tasks.index'));\n\n\n    }\n\n    public function edit(Task $task)\n    {\n        return view('tasks.edit' , ['task'=>$task]);\n    }\n\n    public function update(Task $task)\n    {\n        $task->update($this->validateTask());\n        return redirect(route('tasks.show' , $task));\n    }\n\n    public function destroy()\n    {\n\n    }\n\n    protected function validateTask()\n    {\n        return request()->validate([\n            'title' => 'required',\n            'performer_id' => 'required',\n            'PM_id' => 'required',\n            'due_date' => 'required',\n            'description' => 'required'\n        ]);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Http/Controllers/TasksController.php	(revision ba5b8acca5cd56a6022f1d2c9e04c820abb8feb3)
+++ app/Http/Controllers/TasksController.php	(date 1607115522387)
@@ -1,10 +1,13 @@
 <?php
 
 namespace App\Http\Controllers;
+use App\Events\MailPerformer;
 use App\Models\Task;
 use App\Models\Tag;
 use App\Models\User;
-use Illuminate\Http\Request;
+use App\Notifications\TaskAsigned;
+use Illuminate\Support\Facades\Mail;
+use Illuminate\Support\Facades\Notification;
 
 class TasksController extends Controller
 {
@@ -34,15 +37,18 @@
 
     public function store()
     {
-        //dd(request()->all());
 
         $task = new Task($this->validateTask());
-        //$task = new Task($this->validateTask());
-        //dd("here");
         $task->user_id = 1;
         $task->save();
         $task->tags()->attach(request('tags'));
-       // Task::create(request()->all());
+
+
+        Mail::raw('You have a new task assigned', function ($message){
+            $message->to(User::find(request()->performer_id)->email)
+                    ->subject('new Task');
+        });
+
         return redirect(route('tasks.index'));
 
 
Index: app/Models/Task.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse App\\Models\\User;\nuse App\\Models\\Tag;\n\nclass Task extends Model\n{\n    use HasFactory;\n\n    protected $guarded = [];\n\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n\n    public function tags()\n    {\n        return $this->belongsToMany(Tag::class);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Models/Task.php	(revision ba5b8acca5cd56a6022f1d2c9e04c820abb8feb3)
+++ app/Models/Task.php	(date 1607115573543)
@@ -6,18 +6,44 @@
 use Illuminate\Database\Eloquent\Model;
 use App\Models\User;
 use App\Models\Tag;
+use Carbon\Carbon;
+use DateTime;
 
 class Task extends Model
 {
     use HasFactory;
 
-    protected $guarded = [];
-
     public function user()
     {
         return $this->belongsTo(User::class);
     }
 
+    public function calculateTimeLeft($id)
+    {
+        $startTime = new DateTime();
+        $finishTime=new DateTime(Task::find($id)->due_date);
+        $timeleft = $startTime->diff($finishTime, true);
+        return $timeleft->d . "d " . $timeleft->h . "h " . $timeleft ->i . "m ";
+    }
+
+    public function isCompleted($id) : string
+    {
+        $attHtml = "";
+
+        if($this->completed==1){
+            $attHtml .= '<p>Yes</p>';
+        }else{
+
+            $attHtml .='<p>No</p>
+                <form action="?action=check-box" method="post">
+                    <input type="checkbox" name="done" value="' . Task::find($id)->id .
+                ' " />
+                    <input type="submit" name="formSubmit" hidden="true" value=" " </form> ';
+        }
+
+        return $attHtml;
+    }
+
     public function tags()
     {
         return $this->belongsToMany(Tag::class);
Index: app/Providers/EventServiceProvider.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Auth\\Events\\Registered;\nuse Illuminate\\Auth\\Listeners\\SendEmailVerificationNotification;\nuse Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\nuse Illuminate\\Support\\Facades\\Event;\n\nclass EventServiceProvider extends ServiceProvider\n{\n    /**\n     * The event listener mappings for the application.\n     *\n     * @var array\n     */\n    protected $listen = [\n        Registered::class => [\n            SendEmailVerificationNotification::class,\n        ],\n    ];\n\n    /**\n     * Register any events for your application.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        //\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Providers/EventServiceProvider.php	(revision ba5b8acca5cd56a6022f1d2c9e04c820abb8feb3)
+++ app/Providers/EventServiceProvider.php	(date 1607115910400)
@@ -2,6 +2,7 @@
 
 namespace App\Providers;
 
+use App\Listeners\AwardAchievents;
 use Illuminate\Auth\Events\Registered;
 use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
 use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
@@ -17,7 +18,7 @@
     protected $listen = [
         Registered::class => [
             SendEmailVerificationNotification::class,
-        ],
+        ]
     ];
 
     /**
@@ -29,4 +30,11 @@
     {
         //
     }
+
+    public function shouldDiscoverEvents()
+    {
+        return true;
+    }
+
+
 }
